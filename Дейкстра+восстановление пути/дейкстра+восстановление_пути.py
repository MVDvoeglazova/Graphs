# -*- coding: utf-8 -*-
"""Дейкстра+восстановление пути.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sXiE1iE8T9GlMiG64PmFaKC1-lw5MFu1
"""

import math
with open('test.txt', 'r', encoding='utf-8') as f1:
    my_dict = dict() #словарь, состоит из 3 ключевых имен и их значений:Route:[['a', 'd']]
                                                                      #Nodes:[['a', 'b', 'c', 'd', 'e', 'f', 'g']]
                                                                      #Edges:[['a', 'b', '10'], ['b', 'c', '2'], ['b', 'd', '9'],...
    for s in f1:
        if ':' in s:
            num = s.find(':')
            my_dict[s[:num]] = list()
            my_dict[s[:num]] += [s[num+1:-1].split(', ')]
        else:
            my_dict['Edges'] += [s[:-1].split(', ')]
        
#список вершин
vertex = (my_dict['Nodes'][0])

graph = dict() #для хранения ребер вершин и их веса
for k in vertex:
    graph[k] = []

for num_val in range(len(my_dict['Edges'])):
    graph[my_dict['Edges'][num_val][1]] += [[my_dict['Edges'][num_val][0],my_dict['Edges'][num_val][2]]]
    graph[my_dict['Edges'][num_val][0]] += [[my_dict['Edges'][num_val][1],my_dict['Edges'][num_val][2]]]
#graph = {a:[['b', '10'], ['g', '5']], ...

Nodes = {i:math.inf for i in my_dict['Nodes'][0]} #cписок вершин и кратчайших путей до них
Nodes['a'] = 0 
set_visited = set() #множество посещенных вершин

def Dijkstra(vert: str, Nodes: dict, set_visited: set, graph: dict):
    if len(set_visited) == len(Nodes):
        return 
    if vert not in set_visited:
        set_visited.add(vert)
         
    min_v = vert
    for now_v,ed in graph[vert]:
            if Nodes[now_v] > float(ed) + float(Nodes[vert]):
                 Nodes[now_v] = float(ed) + float(Nodes[vert])
                 min_v = now_v
    if min_v not in set_visited:
        return Dijkstra(min_v, Nodes, set_visited, graph)
    else: return
            
for vert in Nodes:
    Dijkstra(vert, Nodes, set_visited, graph)

#vert - рассматриваемая вершина
#Nodes - cловарь вида "вершина": "кратчайший путь до нее"
#сhorter_way - cписок вершин, которые представляют собой кратчайший путь от одной заданной вершины до другой
def route(vert: str, Nodes: dict, graph: dict, shorter_way: list):
    shorter_way.append(vert)
    if Nodes[vert] == '0':
        return
    for v,way in graph[vert]:
        if float(Nodes[v]) == float(Nodes[vert] - float(way)):
            return route(v, Nodes, graph, shorter_way)
shorter_way = list()
route(my_dict['Route'][0][1], Nodes, graph, shorter_way) #my_dict['Route'][0][1] в данном случае вершина 'd'